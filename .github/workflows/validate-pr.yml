name: Validate Plugin Submission
on:
  pull_request:
    branches:
      - main
    paths:
      - 'plugins.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate new plugin entry
        run: |
          node <<'EOL'
          const fs = require('fs');
          const https = require('https');

          async function main() {
            try {
              const mainPlugins = JSON.parse(fs.readFileSync('main/plugins.json', 'utf8'));
              const prPlugins = JSON.parse(fs.readFileSync('pr/plugins.json', 'utf8'));

              const mainRepoUrls = new Set(mainPlugins.map(p => p.repositoryUrl));
              const newPlugins = prPlugins.filter(p => !mainRepoUrls.has(p.repositoryUrl));

              if (newPlugins.length === 0) {
                console.log('No new plugins detected in plugins.json.');
                process.exit(0);
              }

              if (newPlugins.length > 1) {
                throw new Error('Error: Only one plugin can be submitted per Pull Request.');
              }

              const plugin = newPlugins[0];
              console.log(`Validating new plugin: ${plugin.id} from ${plugin.repositoryUrl}`);

              const manifest = await fetchManifest(plugin.repositoryUrl);
              validateManifest(manifest);

              console.log('✅ Validation successful!');
            } catch (error) {
              console.error(`❌ Validation failed: ${error.message}`);
              process.exit(1);
            }
          }

          function fetchManifest(repoUrl) {
            // Converts https://github.com/user/repo to https://raw.githubusercontent.com/user/repo/main/manifest.json
            const rawUrl = repoUrl.replace('github.com', 'raw.githubusercontent.com') + '/main/manifest.json';
            console.log(`Fetching manifest from: ${rawUrl}`);

            return new Promise((resolve, reject) => {
              https.get(rawUrl, res => {
                if (res.statusCode !== 200) {
                  return reject(new Error(`Could not fetch manifest.json from repository. Status Code: ${res.statusCode}. Ensure the file exists in the 'main' branch.`));
                }
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => resolve(JSON.parse(data)));
              }).on('error', err => reject(new Error(`Network error fetching manifest: ${err.message}`)));
            });
          }

          function validateManifest(manifest) {
            const requiredFields = ['manifest_version', 'name', 'version', 'description', 'author', 'license', 'host_application'];
            for (const field of requiredFields) {
              if (!manifest[field]) throw new Error(`manifest.json is missing required field: '${field}'`);
            }
            if (typeof manifest.author !== 'object' || !manifest.author.name || !manifest.author.url) {
                throw new Error("manifest.json 'author' field must be an object with 'name' and 'url' properties.");
            }
            if (typeof manifest.host_application !== 'object' || !manifest.host_application.min_version) {
                throw new Error("manifest.json 'host_application' field must be an object with a 'min_version' property.");
            }
            console.log('Manifest structure is valid.');
          }

          main();
          EOL